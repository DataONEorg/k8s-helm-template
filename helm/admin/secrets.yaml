######################################################################################
#     D O   N O T   C H E C K   C R E D E N T I A L S   I N T O   G I T H U B ! ! !
######################################################################################
#
# Edit this file to add your passwords, then install them in your cluster by one of the
# following methods. Assuming your release name is "my-release": (NOTE THE RELEASE NAME MUST
# MATCH THE ONE YOU USE WITH HELM!)
#
# 1. Define the release name on the command line:
#     $  RELEASE_NAME=my-release  envsubst < secrets.yaml | kubectl apply -n <mynamespace> -f -
#
#     # if this results in "command not found: envsubst", you can install envsubst (e.g. on Mac OS:
#        $  brew install gettext && brew link --force gettext
#
# 2. Alternatively, you can simply replace "${RELEASE_NAME}" in the file below (be sure to retain
#    the "-secrets" part), and do:     $  kubectl apply -n <mynamespace> -f secrets.yaml)
#
apiVersion: v1
kind: Secret
metadata:
  #######################################################################
  ##  EDIT THIS TO SUBSTITUTE YOUR RELEASE NAME, IF IT'S NOT "ns" ! ! !
  #######################################################################
  name: ${RELEASE_NAME}-%%APP_ABBREV_NAME%%-secrets

type: Opaque

## @param stringData write-only, non-binary secret data (eg credentials) in string form. These
## will typically be loaded as environment variables in the container, so should if possible be
## UPPERCASE, and prefixed with something short and identifiable. Example: for the Notification
## Service chart use "NS_", giving: NS_DATABASE_PASSWORD, NS_API_KEY, etc.
##
## # # #    NEVER CHECK SECRETS INTO GITHUB!   # # #
##
stringData:
  ## @param 'ns.database.password'
  ## the Postgres database password for the (existing) user
  ##
  ## IMPORTANT NOTE: Once the chart is deployed, it is not possible to change the application's
  ## access credentials, such as usernames or passwords, using Helm. To change these application
  ## credentials after deployment, delete any persistent volumes (PVs) used by the chart and
  ## re-deploy it, or use the application's built-in administrative tools if available.
  ##
  ## This example sets the password for the postgresql sub-chart. If PostgreSQL is not needed,
  ## you can remove it permanently using the following steps:
  ## 1. Remove this entire postgresql section from the values.yaml file
  ## 2. Remove the postgresql sub-chart from the Chart.yaml file
  ## 3. Remove the postgresql password from the secrets.yaml file
  ##
  %%ENV_PREFIX%%_DATABASE_PASSWORD: "YOUR-PASSWORD-HERE"
